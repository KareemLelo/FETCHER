// controllers/userController.js
import User from '../models/user.js';
//The salt generated by Bcrypt is 128 bits (16 bytes) in length. When you use Bcrypt, the entire output string, often referred to as the "hash", is typically 60 characters long
import bcrypt from 'bcryptjs';

export const registerUser = async (req, res) => {
  try {
    const { userName, email, password } = req.body;
    console.log(userName,email,password)
    // Check if username or email already exists
    const alreadyExists = await User.usernameOrEmailExists(userName, email);
    if (alreadyExists) {
      console.log("Username or email already in use");
      return res.status(409).json({ message: "Username or email already in use" });
    }

    // Validate password strength
    const passwordRegex = new RegExp('^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^\\da-zA-Z]).{8,}$');
    if (!passwordRegex.test(password)) {
      console.log("Password does not meet complexity requirements.")
      return res.status(400).json({message: "Password does not meet complexity requirements."});
    }
    // Hash password here, 10 stands for 10 salt rounds 
    const hashedPassword = await bcrypt.hash(password, 10);
    //console.log(hashedPassword)
    // Create a new instance of User with the request data (including the hashed password).
    const newUser = new User({
      ...req.body,
      password: hashedPassword,
    });
    // Save the new user instance to the database.
    const savedUser = await newUser.save();
    res.status(201).json({ message: "Signup successful", userId: savedUser._id });
    //console.log("Signup successful");
  } catch (error) {
    console.log("Error during signup", error);
    res.status(500).json({ message: "Error during signup" });
  }
};

export const loginUser = async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findByCredentials(username);

    if (user && await bcrypt.compare(password, user.password)) {
      console.log('successful login for:', username);
      res.status(200).json({ message: "Successfully logged in" });
    } else {
      console.log('login failed for:', username);
      res.status(401).json({ message: "Invalid Username or Password" });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "An error occurred during the login process" });
  }
};
