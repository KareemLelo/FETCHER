import User from './user.js';
import Quest from "../questManagementComponent/quest.js";
import jwt from 'jsonwebtoken'
//The salt generated by Bcrypt is 128 bits (16 bytes) in length. When you use Bcrypt, the entire output string, often referred to as the "hash", is typically 60 characters long
import bcrypt from 'bcryptjs';
import { log } from 'console';

// Function to generate JWT token
//The id in the generateToken function is the unique identifier for the user in the database.
// When a JWT token is created after a successful login or registration,
// it embeds the user's ID within the token's payload.
// This ID is then used to identify the user in subsequent requests to protected routes.
const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {expiresIn: '600s'});
};

export const registerUser = async (req, res) => {
  try {
    const password = req.body.password;
    // Hash password here, 10 stands for 10 salt rounds 
    const hashedPassword = await bcrypt.hash(password, 10);
    // Create a new instance of User with the request data (including the hashed password).
    const newUser = new User({
      ...req.body,
      password: hashedPassword,
    });
    // Save the new user instance to the database.
    const savedUser = await newUser.save();

    console.log("successful sign up for: ", savedUser.userName,"id: ", savedUser._id);
    //generate a token 
    const token = generateToken(savedUser._id);
    res.status(200).json({
      _id: savedUser._id,
      userName: savedUser.userName,
      email: savedUser.email,
      token,
      message: "Signup successful"
    });
  } catch (error) {
    console.log("Error during signup", error);
    res.status(500).json({ message: "Error during signup" });
  }
};

export const loginUser = async (req, res) => {
  try {
    const { userName, password } = req.body;
    const user = await User.findByUserName(userName);
    console.log(user._id)
    if (user && (await bcrypt.compare(password, user.password))) {
      /*console.log('successful login for:', userName);
      console.log('Account Email is :', user.email);
      console.log('Account Mobile is :', user.mobile);
      console.log('Account Category is :', user.accCategory);*/

      const token = generateToken(user._id);
      res.json({
        _id: user._id,
        userName: user.userName,
        email: user.email,
        accCategory: user.accCategory,
        token
      });
    } else {
      console.log('login failed for:', userName);
      res.status(401).json({ message: "Invalid Username or Password" });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "An error occurred during the login process" });
  }
};

// Get current user's profile
export const getUserProfile = async (req, res) => {
  try {
    if (!req.user || !req.user._id) {
      return res.status(404).send('User not found');
    }
    const user = await User.findById(req.user._id);
    
    console.log("Passport Details:", user.passportDetails);
    console.log("Flight Details:", user.flightDetails);

    if (user) {
      const userProfile = {
        id: user._id,
        name: user.firstName + " " + user.lastName,
        email: user.email,
        mobileNumber: user.mobile,
        bio: user.bio,
        passportDetails: user.passportDetails || {
          passportNumber: "",
          nationality: "",
          passportExpDate: ""
        },
        flightDetails: user.flightDetails || {
          departureDate: "",
          arrivalDate: "",
          departureFlightNumber: "",
          arrivalFlightNumber: "",
          alreadyThere: false
        }
      };
  

      
      res.json(userProfile);
    } else {
      res.status(404).send('User not found');
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "An error occurred during the process" });
  }
};

export const updateUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

  // Update profile fields
  const updates = req.body;
  for (let key in updates) {
    if (key in user) user[key] = updates[key];
  }

    const updatedUser = await user.save();  // Save the updated user info

    res.json({
      id: updatedUser._id,
      name: updatedUser.name,
      email: updatedUser.email,
      mobile: updatedUser.mobile,
      bio: updatedUser.bio
    });
  } catch (error) {
    console.error('Error updating user profile:', error);
    res.status(500).json({ message: 'Error updating user profile' });
  }
};

export const updatePassportDetails = async (req, res) => {
  try {
      const user = await User.findById(req.user._id);
      if (!user) {
          return res.status(404).json({ message: 'User not found' });
      }
      
      if (user._id.toString() !== req.user._id) {
        return res.status(403).json({ message: 'Unauthorized to update these details' });
    }
    // Update passport details
    user.passportDetails = {
      ...user.passportDetails,
      ...req.body
    };

    await user.save();
   

    res.status(200).json({
        message: 'Passport details updated successfully',
        passportDetails: user.passportDetails
    });
  } catch (error) {
      console.error('Failed to update passport details:', error);
      res.status(500).json({ message: 'Error updating passport details' });
  }
};

export const updateFlightDetails = async (req, res) => {
  const userId = req.user._id;

  try {
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Update flight details
    user.flightDetails = {
      ...user.flightDetails,
      ...req.body,
    };

    await user.save();
    

    res.status(200).json({
      message: 'Flight details updated successfully',
      flightDetails: user.flightDetails,
    });
  } catch (error) {
    console.error('Failed to update flight details:', error);
    res.status(500).json({ message: 'Error updating flight details' });
  }
};

export const acceptQuest = async (req, res) => {
  const questId = req.params.questId;
  const userId = req.user._id;
  try {
    const quest = await Quest.findById(questId);
    if (!quest) {
      return res.status(404).json({ message: "Quest not found" });
    }

    if (quest.statusIndex === 1) {
      return res.status(400).json({ message: "This quest has already been accepted" });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    quest.statusIndex = 1;

    if(req.body.alreadyThere)
    {
      user.alreadyThere= true;
      quest.progressIndex= 2;
    }else{
      quest.progressIndex=0;
    }
    quest.acceptedBy = userId;

    await user.save();
    await quest.save();

    res.json({ message: "Quest accepted successfully", quest });
  } catch (error) {
    console.error('Failed to accept quest:', error);
    res.status(500).json({ message: "An error occurred during the process of accepting the quest" });
  }
};